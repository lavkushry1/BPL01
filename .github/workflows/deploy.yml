name: Deploy to Production

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi
          echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./eventia-backend-express
          file: ./eventia-backend-express/Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/eventia-backend:${{ env.ENVIRONMENT }}
            ${{ secrets.DOCKERHUB_USERNAME }}/eventia-backend:${{ env.ENVIRONMENT }}-${{ env.TIMESTAMP }}
          build-args: |
            NODE_ENV=production
            
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./eventia-ticketing-flow1
          file: ./eventia-ticketing-flow1/Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/eventia-frontend:${{ env.ENVIRONMENT }}
            ${{ secrets.DOCKERHUB_USERNAME }}/eventia-frontend:${{ env.ENVIRONMENT }}-${{ env.TIMESTAMP }}
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL_PROD }}
            VITE_WS_URL=${{ secrets.VITE_WS_URL_PROD }}
            VITE_SENTRY_DSN=${{ secrets.VITE_SENTRY_DSN }}
            VITE_APP_VERSION=${{ github.ref_name }}
            VITE_RELEASE_ID=${{ env.TIMESTAMP }}
            
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set environment variables
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi
          echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          
      - name: Generate environment file from template
        env:
          API_URL: ${{ secrets.VITE_API_URL_PROD }}
          WS_URL: ${{ secrets.VITE_WS_URL_PROD }}
          APP_VERSION: ${{ github.ref_name }}
          RELEASE_ID: ${{ env.TIMESTAMP }}
          SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          PAYMENT_GATEWAY_PUBLIC_KEY: ${{ secrets.PAYMENT_GATEWAY_PUBLIC_KEY }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          BUILD_TIMESTAMP: ${{ env.BUILD_TIMESTAMP }}
          ENABLE_ANALYTICS: ${{ env.ENVIRONMENT == 'production' && 'true' || 'false' }}
        run: |
          # Create temporary file with substituted values
          envsubst < ./eventia-ticketing-flow1/.env.template > .env.production
        
      - name: Generate SBOM for deployed images
        run: |
          # Install syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Generate SBOM for backend image
          syft ${{ secrets.DOCKERHUB_USERNAME }}/eventia-backend:${{ env.ENVIRONMENT }}-${{ env.TIMESTAMP }} -o json > backend-sbom.json
          
          # Generate SBOM for frontend image
          syft ${{ secrets.DOCKERHUB_USERNAME }}/eventia-frontend:${{ env.ENVIRONMENT }}-${{ env.TIMESTAMP }} -o json > frontend-sbom.json
          
          # Save SBOMs as artifacts
          mkdir -p sbom
          mv *-sbom.json sbom/
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-files
          path: sbom/
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          
      - name: Deploy to server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Create deployment directory
          ssh $SERVER_USER@$SERVER_HOST "mkdir -p $DEPLOY_PATH/$ENVIRONMENT"
          
          # Copy docker-compose file
          scp docker-compose.prod.yml $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/$ENVIRONMENT/docker-compose.yml
          
          # Copy environment files (securely)
          scp .env.production $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/$ENVIRONMENT/.env
          
          # Deploy and start services
          ssh $SERVER_USER@$SERVER_HOST "cd $DEPLOY_PATH/$ENVIRONMENT && \
            docker-compose -f docker-compose.yml pull && \
            docker-compose -f docker-compose.yml up -d --remove-orphans"
          
  post-deploy:
    name: Post-Deployment Tasks
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Run database migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}/${{ github.event.inputs.environment || 'staging' }}
            docker-compose exec -T backend npm run migrate
            
      - name: Run health checks
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Wait for services to start
            sleep 10
            
            # Check backend health
            curl -f http://${{ secrets.SERVER_HOST }}:4000/api/v1/health || exit 1
            
            # Check frontend health
            curl -f -L http://${{ secrets.SERVER_HOST }} -o /dev/null || exit 1
            
      - name: Notify Slack on success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_MESSAGE: "Successfully deployed to ${{ github.event.inputs.environment || 'staging' }} üöÄ"
          SLACK_TITLE: Deployment Success
        if: success()
        
      - name: Notify Slack on failure
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_MESSAGE: "Failed to deploy to ${{ github.event.inputs.environment || 'staging' }} ‚ùå"
          SLACK_TITLE: Deployment Failure
        if: failure() 