# Build stage
FROM node:18-alpine AS build

WORKDIR /app

# Install dependencies with audit and production-only flags
COPY package*.json ./
RUN npm ci --audit=false --production=false

# Copy source code
COPY . .

# Generate release ID if not provided
RUN chmod +x ./scripts/set-release-id.sh && \
    ./scripts/set-release-id.sh

# Build arguments for environment variables
ARG VITE_API_URL
ARG VITE_WS_URL
ARG VITE_SENTRY_DSN
ARG VITE_APP_VERSION
ARG VITE_RELEASE_ID
ARG VITE_PAYMENT_GATEWAY_PUBLIC_KEY

# Set environment variables for the build
ENV VITE_API_URL=$VITE_API_URL
ENV VITE_WS_URL=$VITE_WS_URL
ENV VITE_SENTRY_DSN=$VITE_SENTRY_DSN
ENV VITE_APP_VERSION=${VITE_APP_VERSION:-"1.0.0"}
# Use script-generated release ID or build arg
RUN if [ -z "$VITE_RELEASE_ID" ] && [ -f .env.release ]; then \
      export VITE_RELEASE_ID=$(grep VITE_RELEASE_ID .env.release | cut -d '=' -f2); \
    else \
      export VITE_RELEASE_ID=${VITE_RELEASE_ID:-"1.0.0"}; \
    fi && \
    echo "VITE_RELEASE_ID=$VITE_RELEASE_ID" >> .env.build

ENV VITE_PAYMENT_GATEWAY_PUBLIC_KEY=$VITE_PAYMENT_GATEWAY_PUBLIC_KEY
ENV NODE_ENV=production

# Source the build environment variables
RUN if [ -f .env.build ]; then export $(cat .env.build | xargs); fi

# Build the app with optimizations
RUN npm run build

# Create a lightweight container for security scanning
FROM alpine:latest AS scan
WORKDIR /app
COPY --from=build /app/dist /app
RUN apk add --no-cache trivy && \
    trivy fs --skip-dirs node_modules --severity HIGH,CRITICAL --exit-code 1 /app || exit 0

# Production stage
FROM nginx:alpine

# Add non-root user for nginx
RUN addgroup -g 101 -S nginx-app && \
    adduser -u 101 -S -G nginx-app -h /var/cache/nginx nginx-app && \
    chown -R nginx-app:nginx-app /var/cache/nginx

# Copy built assets from 'build' stage
COPY --from=build --chown=nginx-app:nginx-app /app/dist /usr/share/nginx/html

# Copy version info for health checks
COPY --from=build --chown=nginx-app:nginx-app /app/.env.release /usr/share/nginx/html/version.json

# Copy nginx configuration
COPY --chown=nginx-app:nginx-app nginx/default.conf /etc/nginx/conf.d/default.conf

# Create directory for SSL certificates
RUN mkdir -p /etc/nginx/ssl && \
    chown -R nginx-app:nginx-app /etc/nginx/ssl

# Add security headers configuration
COPY --chown=nginx-app:nginx-app nginx/security-headers.conf /etc/nginx/conf.d/security-headers.conf

# Create self-signed certificates for development/testing
# Replace these with proper certificates in production
RUN apk add --no-cache openssl && \
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout /etc/nginx/ssl/key.pem -out /etc/nginx/ssl/cert.pem \
    -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost" && \
    chmod 600 /etc/nginx/ssl/key.pem /etc/nginx/ssl/cert.pem && \
    chown nginx-app:nginx-app /etc/nginx/ssl/key.pem /etc/nginx/ssl/cert.pem

# Create certificate renewal check script
RUN echo '#!/bin/sh' > /usr/local/bin/check-cert.sh && \
    echo 'expiry_date=$(openssl x509 -in /etc/nginx/ssl/cert.pem -enddate -noout | cut -d= -f2)' >> /usr/local/bin/check-cert.sh && \
    echo 'expiry_epoch=$(date -d "$expiry_date" +%s)' >> /usr/local/bin/check-cert.sh && \
    echo 'now_epoch=$(date +%s)' >> /usr/local/bin/check-cert.sh && \
    echo 'days_left=$(( (expiry_epoch - now_epoch) / 86400 ))' >> /usr/local/bin/check-cert.sh && \
    echo 'if [ $days_left -lt 30 ]; then echo "Certificate expires in $days_left days"; exit 1; fi' >> /usr/local/bin/check-cert.sh && \
    chmod +x /usr/local/bin/check-cert.sh

# Remove default configuration and add security settings
RUN rm -f /etc/nginx/conf.d/default.conf && \
    echo "server_tokens off;" > /etc/nginx/conf.d/security.conf && \
    echo "client_max_body_size 10M;" >> /etc/nginx/conf.d/security.conf

# Add healthcheck that also validates certificate expiration
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/health && \
        /usr/local/bin/check-cert.sh || exit 1

# Expose ports
EXPOSE 80 443

# Switch to non-root user
USER nginx-app

# Start nginx
CMD ["nginx", "-g", "daemon off;"] 