generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid())
  email             String           @unique
  name              String
  password          String
  role              UserRole         @default(USER)
  verified          Boolean          @default(false)
  verificationToken String?
  isDeleted         Boolean          @default(false) @map("is_deleted")
  deletedAt         DateTime?        @map("deleted_at")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  verifiedPayments  BookingPayment[] @relation("VerifiedPayments")
  bookings          Booking[]
  createdEvents     Event[]          @relation("UserEvents")
  refreshTokens     RefreshToken[]
  eventsCreatedBy   Event[]          @relation("EventCreator")
  eventsUpdatedBy   Event[]          @relation("EventUpdater")
  tickets           Ticket[]

  @@index([isDeleted])
  @@map("users")
}

model Event {
  id               String           @id @default(uuid())
  title            String
  description      String
  startDate        DateTime         @map("start_date")
  endDate          DateTime         @map("end_date")
  location         String
  status           EventStatus      @default(DRAFT)
  capacity         Int?
  imageUrl         String?          @map("image_url")
  organizerId      String           @map("organizer_id")
  isDeleted        Boolean          @default(false) @map("is_deleted")
  deletedAt        DateTime?        @map("deleted_at")
  createdBy        String?          @map("created_by")
  updatedBy        String?          @map("updated_by")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  pricingLogs      PricingLog[]
  pricingRules     PricingRule[]
  bookings         Booking[]
  organizer        User             @relation("UserEvents", fields: [organizerId], references: [id], onDelete: Cascade)
  creator          User?            @relation("EventCreator", fields: [createdBy], references: [id])
  updater          User?            @relation("EventUpdater", fields: [updatedBy], references: [id])
  seats            Seat[]
  ticketCategories TicketCategory[]
  categories       Category[]       @relation("EventCategories")
  discounts        Discount[]       @relation("EventDiscounts")
  tickets          Ticket[]
  eventSummary     EventSummary?

  @@index([organizerId])
  @@index([status])
  @@index([startDate, endDate])
  @@index([isDeleted])
  @@map("events")
}

model Booking {
  id              String           @id @default(uuid())
  userId          String           @map("user_id")
  eventId         String           @map("event_id")
  status          BookingStatus    @default(PENDING)
  quantity        Int              @default(1)
  finalAmount     Decimal          @map("final_amount") @db.Decimal(10, 2)
  seats           Json?            // Keep for backward compatibility
  discountId      String?          @map("discount_id")
  paymentSessionId String?         @unique @map("payment_session_id")
  isDeleted       Boolean          @default(false) @map("is_deleted")
  deletedAt       DateTime?        @map("deleted_at")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bookingPayment  BookingPayment?
  discount        Discount?        @relation(fields: [discountId], references: [id])
  event           Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryDetails DeliveryDetails?
  payment         Payment?
  paymentSession  PaymentSession?  @relation(fields: [paymentSessionId], references: [id])
  bookedSeats     BookedSeat[]
  tickets         Ticket[]

  @@index([userId])
  @@index([eventId])
  @@index([status])
  @@index([createdAt])
  @@index([isDeleted])
  @@map("bookings")
}

model BookedSeat {
  id        String   @id @default(uuid())
  bookingId String   @map("booking_id")
  seatId    String   @map("seat_id")
  createdAt DateTime @default(now()) @map("created_at")
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  seat      Seat     @relation(fields: [seatId], references: [id], onDelete: Cascade)

  @@unique([bookingId, seatId])
  @@index([bookingId])
  @@index([seatId])
  @@map("booked_seats")
}

model Payment {
  id        String        @id @default(uuid())
  bookingId String        @unique @map("booking_id")
  amount    Decimal       @db.Decimal(10, 2)
  status    PaymentStatus @default(PENDING)
  method    String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model BookingPayment {
  id          String    @id @default(uuid())
  bookingId   String    @unique @map("booking_id")
  amount      Decimal   @db.Decimal(10, 2)
  utrNumber   String?   @map("utr_number")
  paymentDate DateTime? @map("payment_date")
  status      String    @default("pending")
  verifiedBy  String?   @map("verified_by")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  admin       User?     @relation("VerifiedPayments", fields: [verifiedBy], references: [id])

  @@map("booking_payments")
}

model UpiSettings {
  id             String   @id @default(uuid())
  upivpa         String
  discountamount Decimal  @db.Decimal(10, 2)
  isactive       Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("upi_settings")
}

model DeliveryDetails {
  id        String   @id @default(uuid())
  bookingId String   @unique @map("booking_id")
  name      String
  email     String
  phone     String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("delivery_details")
}

model Discount {
  id          String       @id @default(uuid())
  code        String       @unique
  type        DiscountType
  value       Decimal      @db.Decimal(10, 2)
  maxUses     Int          @default(0) @map("max_uses")
  usedCount   Int          @default(0) @map("used_count")
  minAmount   Decimal?     @map("min_amount") @db.Decimal(10, 2)
  startDate   DateTime     @map("start_date")
  endDate     DateTime     @map("end_date")
  isActive    Boolean      @default(true) @map("is_active")
  isDeleted   Boolean      @default(false) @map("is_deleted")
  deletedAt   DateTime?    @map("deleted_at")
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  bookings    Booking[]
  events      Event[]      @relation("EventDiscounts")

  @@index([isActive])
  @@index([startDate, endDate])
  @@index([isDeleted])
  @@map("discounts")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]  @relation("EventCategories")

  @@map("categories")
}

model TicketCategory {
  id           String       @id @default(uuid())
  name         String
  description  String?
  price        Decimal      @db.Decimal(10, 2)
  totalSeats   Int          @default(0)  // Total seats in this category
  bookedSeats  Int          @default(0)  // Number of booked seats
  capacity     Int?         // Optional capacity field
  available    Int?         @default(0)
  eventId      String       @map("event_id")
  isDeleted    Boolean      @default(false) @map("is_deleted")
  deletedAt    DateTime?    @map("deleted_at") 
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  event        Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  pricingRules PricingRule[]
  pricingLogs  PricingLog[]
  tickets      Ticket[]

  @@index([eventId])
  @@index([isDeleted])
  @@map("ticket_categories")
}

model PricingRule {
  id                String          @id @default(uuid())
  eventId           String          @map("event_id")
  ticketCategoryId  String?         @map("ticket_category_id")
  type              String
  value             Decimal         @db.Decimal(10, 2)
  startTime         DateTime?       @map("start_time")
  endTime           DateTime?       @map("end_time")
  isActive          Boolean         @default(true) @map("is_active")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  event             Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketCategory    TicketCategory? @relation(fields: [ticketCategoryId], references: [id])

  @@index([eventId])
  @@map("pricing_rules")
}

model PricingLog {
  id               String        @id @default(uuid())
  eventId          String        @map("event_id")
  ticketCategoryId String        @map("ticket_category_id")
  oldPrice         Decimal       @map("old_price") @db.Decimal(10, 2)
  newPrice         Decimal       @map("new_price") @db.Decimal(10, 2)
  reason           String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  event            Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketCategory   TicketCategory @relation(fields: [ticketCategoryId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([ticketCategoryId])
  @@map("pricing_logs")
}

model Seat {
  id               String               @id @default(uuid())
  label            String?              // Descriptive label like "Main Floor-A1"
  row              String?
  seatNumber       String?              @map("seat_number")
  section          String?
  type             String?
  status           SeatStatus           @default(AVAILABLE)
  price            Decimal?             @db.Decimal(10, 2)
  meta             Json?                @default("{}")
  eventId          String               @map("event_id")
  ticketCategoryId String?              @map("ticket_category_id")
  paymentIntentId  String?              @map("payment_intent_id") 
  isDeleted        Boolean              @default(false) @map("is_deleted")
  deletedAt        DateTime?            @map("deleted_at")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  event            Event                @relation(fields: [eventId], references: [id], onDelete: Cascade)
  paymentIntent    PaymentIntent?       @relation("PaymentIntentSeats", fields: [paymentIntentId], references: [id])
  bookedSeats      BookedSeat[]
  tickets          Ticket[]
  paymentSessionSeats PaymentSessionSeat[]
  seatLock         SeatLock[]

  @@index([eventId])
  @@index([status])
  @@index([paymentIntentId])
  @@index([isDeleted])
  @@map("seats")
}

model PaymentSession {
  id             String               @id @default(uuid())
  userId         String               @map("user_id")
  eventId        String               @map("event_id")
  amount         Decimal              @db.Decimal(10, 2)
  status         PaymentStatus        @default(PENDING)
  referenceId    String?              @map("reference_id")
  upiId          String               @map("upi_id")
  utrNumber      String?              @map("utr_number")
  qrCodeUrl      String?              @map("qr_code_url")
  upiDeeplink    String?              @map("upi_deeplink")
  expiresAt      DateTime             @map("expires_at")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  sessionSeats   PaymentSessionSeat[]
  booking        Booking?             @relation()

  @@index([userId])
  @@index([eventId])
  @@index([status])
  @@index([expiresAt])
  @@map("payment_sessions")
}

model PaymentSessionSeat {
  id              String         @id @default(uuid())
  paymentSessionId String         @map("payment_session_id")
  seatId          String         @map("seat_id")
  createdAt       DateTime       @default(now()) @map("created_at")
  paymentSession  PaymentSession @relation(fields: [paymentSessionId], references: [id], onDelete: Cascade)
  seat            Seat           @relation(fields: [seatId], references: [id], onDelete: Cascade)

  @@unique([paymentSessionId, seatId])
  @@index([paymentSessionId])
  @@index([seatId])
  @@map("payment_session_seats")
}

model SeatLock {
  seatId    String   @id @map("seat_id")
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seat      Seat     @relation(fields: [seatId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("seat_locks")
}

model ReservationExpiryQueue {
  id          String   @id @default(uuid())
  bookingId   String   @unique
  expiresAt   DateTime @map("expires_at")
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([expiresAt])
  @@index([processed])
  @@map("reservation_expiry_queue")
}

model TicketGenerationQueue {
  id            String    @id @default(uuid())
  bookingId     String    @unique
  nextAttemptAt DateTime? @map("next_attempt_at")
  attempts      Int       @default(0)
  maxAttempts   Int       @default(3) @map("max_attempts")
  status        String    @default("pending")
  error         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([nextAttemptAt, attempts])
  @@index([status, nextAttemptAt])
  @@map("ticket_generation_queue")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  family    String   // Track token family for enhanced security
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([family])
}

model PaymentIntent {
  id          String   @id @default(uuid())
  externalId  String?  @unique
  bookingId   String?  @unique
  amount      Decimal  @db.Decimal(10, 2)
  currency    String   @default("INR")
  status      String   @default("created")
  provider    String   @default("stripe")
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seats       Seat[]   @relation("PaymentIntentSeats")

  @@index([status])
  @@index([createdAt])
  @@map("payment_intents")
}

model Ticket {
  id               String       @id @default(uuid())
  code             String       @unique
  status           TicketStatus @default(PENDING)
  firstName        String?      @map("first_name")
  lastName         String?      @map("last_name")
  email            String?
  phone            String?
  bookingId        String       @map("booking_id")
  eventId          String       @map("event_id")
  ticketCategoryId String       @map("ticket_category_id")
  seatId           String?      @map("seat_id")
  userId           String?      @map("user_id")
  price            Decimal      @db.Decimal(10, 2)
  checkedIn        Boolean      @default(false) @map("checked_in")
  checkedInAt      DateTime?    @map("checked_in_at")
  isDeleted        Boolean      @default(false) @map("is_deleted")
  deletedAt        DateTime?    @map("deleted_at")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  booking          Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  event            Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketCategory   TicketCategory @relation(fields: [ticketCategoryId], references: [id], onDelete: Cascade)
  seat             Seat?        @relation(fields: [seatId], references: [id])
  user             User?        @relation(fields: [userId], references: [id])

  @@index([code])
  @@index([bookingId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@index([isDeleted])
  @@map("tickets")
}

model EventSummary {
  id            String   @id @default(uuid())
  eventId       String   @unique @map("event_id")
  totalSeats    Int      @default(0) @map("total_seats")
  bookedSeats   Int      @default(0) @map("booked_seats")
  availableSeats Int     @default(0) @map("available_seats")
  minPrice      Decimal  @default(0) @db.Decimal(10, 2) @map("min_price")
  maxPrice      Decimal  @default(0) @db.Decimal(10, 2) @map("max_price")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_summaries")
}

enum UserRole {
  USER
  ORGANIZER
  ADMIN
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum SeatStatus {
  AVAILABLE
  BOOKED
  LOCKED
  PENDING
  RESERVED
  SOLD
  BLOCKED
  MAINTENANCE
}

enum TicketStatus {
  PENDING
  ACTIVE
  USED
  CANCELLED
  EXPIRED
  REFUNDED
}
